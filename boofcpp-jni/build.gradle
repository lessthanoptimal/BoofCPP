java {
    withJavadocJar()
    withSourcesJar()
    toolchain { languageVersion = JavaLanguageVersion.of(11) }
}

repositories {
    mavenLocal()
    mavenCentral()

    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
}

// Fail on jar conflict
configurations.configureEach { resolutionStrategy { failOnVersionConflict() } }

sourceSets {
    benchmark {
        java { srcDir 'src/benchmark/java' }
        resources { srcDir 'src/benchmark/resources' }
    }
}


dependencies {
    ['ip'].each { String a->
        api('org.boofcv:boofcv-'+a+':'+BOOFCV_VERSION)
    }

    testImplementation group: 'junit', name: 'junit', version: '4.12'

    ['core','generator-annprocess'].each { String a->
        benchmarkImplementation('org.openjdk.jmh:jmh-'+a+':1.19')
    }
    ['io'].each { String a->
        benchmarkImplementation('org.boofcv:boofcv-'+a+':'+BOOFCV_VERSION)
    }
}

javadoc {
    configure(options) { failOnError = false }
}

// Get the location of the native code
if( project.hasProperty("native_build_location")) {
    ext.build_location = project.property("native_build_location")
} else {
    ext.build_location = "../build"
}
if( !file("$ext.build_location").exists() ) {
    throw new GradleException("Native build directory $ext.build_location does not exist!")
}

// Determine which architecture it is being bult on so that it knows what to name the classifier as.
import static org.apache.tools.ant.taskdefs.condition.Os.*

String osName = org.gradle.internal.os.OperatingSystem.current().getName()
String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion()
println "  Platform:        $osName $osVersion ${OS_ARCH}"

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    ext.platform = "linux-${OS_ARCH}"
} else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    ext.platform = "macos-${OS_ARCH}"
} else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
    ext.platform = "unix-${OS_ARCH}"
} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    ext.platform = "windows-${OS_ARCH}"
} else {
    ext.platform = "unknown_${OS_ARCH}"
}

println "  Classifier name: $project.ext.platform"
println "  Native location: $project.ext.build_location"

task nativeJar(type: Jar) {
    classifier "$project.ext.platform"
//    from file("$project.ext.build_location/boofcpp/")
    from file("$project.ext.build_location/jni/")
//    include 'libBoofCPP.*'
    include 'libJNIBoofCPP.*'
}

artifacts {
    archives sourcesJar
//        archives javadocJar

    archives(nativeJar.archivePath) {
        type "jar"
        builtBy nativeJar
    }
}

task benchmarkRun(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.benchmark.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '.*Benchmark*');
    def format = project.properties.get('format', 'json');
    def resultFile = file("build/reports/benchmark/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    args '-rf', format
    args '-rff', resultFile
}
